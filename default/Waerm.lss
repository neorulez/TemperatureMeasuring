
Waerm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000048  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000009c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000029  00000000  00000000  000000bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000018a  00000000  00000000  000000e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000110  00000000  00000000  0000026f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016c  00000000  00000000  0000037f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000d5  00000000  00000000  0000051c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000609  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	12 c0       	rjmp	.+36     	; 0x44 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
{
	/*Port-Konfiguration
	* RB0 = RB1 = RB3 = Input
	* RB2 = RB4 = RB5 = Output
	*/
	DDRB = 0x34;
  22:	84 e3       	ldi	r24, 0x34	; 52
  24:	87 bb       	out	0x17, r24	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  26:	20 e7       	ldi	r18, 0x70	; 112
  28:	37 e1       	ldi	r19, 0x17	; 23
			
					
				PORTB= (0 << PB4);
			//	PORTB= (1 << PB5);
				_delay_ms(d);
				PORTB= (1 << PB4);
  2a:	40 e1       	ldi	r20, 0x10	; 16
	uint8 a=0;
	while (1)
		{	
			
					
				PORTB= (0 << PB4);
  2c:	18 ba       	out	0x18, r1	; 24
  2e:	c9 01       	movw	r24, r18
  30:	01 97       	sbiw	r24, 0x01	; 1
  32:	f1 f7       	brne	.-4      	; 0x30 <main+0xe>
			//	PORTB= (1 << PB5);
				_delay_ms(d);
				PORTB= (1 << PB4);
  34:	48 bb       	out	0x18, r20	; 24
  36:	c9 01       	movw	r24, r18
  38:	01 97       	sbiw	r24, 0x01	; 1
  3a:	f1 f7       	brne	.-4      	; 0x38 <__CCP__+0x4>
  3c:	f7 cf       	rjmp	.-18     	; 0x2c <main+0xa>

0000003e <init_tiny>:
{
	/*Port-Konfiguration
	* RB0 = RB1 = RB3 = Input
	* RB2 = RB4 = RB5 = Output
	*/
	DDRB = 0x34;
  3e:	84 e3       	ldi	r24, 0x34	; 52
  40:	87 bb       	out	0x17, r24	; 23
}
  42:	08 95       	ret

00000044 <_exit>:
  44:	f8 94       	cli

00000046 <__stop_program>:
  46:	ff cf       	rjmp	.-2      	; 0x46 <__stop_program>
