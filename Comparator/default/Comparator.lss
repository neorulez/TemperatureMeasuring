
Comparator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000064  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000033  00000000  00000000  000000d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009d  00000000  00000000  0000010b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000069  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000db  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000090  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	16 c0       	rjmp	.+44     	; 0x38 <__vector_5>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	1f d0       	rcall	.+62     	; 0x5c <main>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <Init>:
#define LED1 PB5
#define LED2 PB4

void Init(){

	DDRB = 0x34; 
  22:	84 e3       	ldi	r24, 0x34	; 52
  24:	87 bb       	out	0x17, r24	; 23

	PORTB|= (1<<AIN0); //no Pull-up
  26:	c0 9a       	sbi	0x18, 0	; 24
	PORTB|= (1<<AIN1);
  28:	c1 9a       	sbi	0x18, 1	; 24
	PORTB|= (0<<PB2);
  2a:	88 b3       	in	r24, 0x18	; 24
  2c:	88 bb       	out	0x18, r24	; 24

	PORTB|=(1<<LED1); //Initally LED is OFF
  2e:	c5 9a       	sbi	0x18, 5	; 24
	PORTB|=(1<<LED2); //Initally LED is OFF
  30:	c4 9a       	sbi	0x18, 4	; 24

	//ADCSRB&=~(1<<ADEN);//make sure ADC is OFF

	//ADMUX|=(0<<MUX2)|(1<<MUX1)|(1<<MUX0); //select ADC3 as negative AIN

	ACSR|=
  32:	43 9a       	sbi	0x08, 3	; 8

	(0<<ACIS1)| //set interrupt on output toggle

	(0<<ACIS0);

	sei();//enable global interrupts
  34:	78 94       	sei



}
  36:	08 95       	ret

00000038 <__vector_5>:

// Interrupt handler for ANA_COMP_vect


ISR(ANA_COMP_vect) {
  38:	1f 92       	push	r1
  3a:	0f 92       	push	r0
  3c:	0f b6       	in	r0, 0x3f	; 63
  3e:	0f 92       	push	r0
  40:	11 24       	eor	r1, r1
  42:	8f 93       	push	r24

	if bit_is_clear(ACSR, ACO)
  44:	45 9b       	sbis	0x08, 5	; 8
		{
			PORTB = (0<<PB4);
  46:	18 ba       	out	0x18, r1	; 24
		}
	if bit_is_set(ACSR, ACO)
  48:	45 9b       	sbis	0x08, 5	; 8
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__SREG__+0x11>
		{
			PORTB = (1<<PB4);
  4c:	80 e1       	ldi	r24, 0x10	; 16
  4e:	88 bb       	out	0x18, r24	; 24
		}
}
  50:	8f 91       	pop	r24
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

0000005c <main>:
//

int main(void) {

	 
	Init();
  5c:	e2 df       	rcall	.-60     	; 0x22 <Init>
  5e:	ff cf       	rjmp	.-2      	; 0x5e <main+0x2>

00000060 <_exit>:
  60:	f8 94       	cli

00000062 <__stop_program>:
  62:	ff cf       	rjmp	.-2      	; 0x62 <__stop_program>
