
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00000098  0000010c  2**0
                  ALLOC
  2 .stab         0000069c  00000000  00000000  0000010c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000054  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000040  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000006a  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000029e  00000000  00000000  000008a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a1  00000000  00000000  00000b44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000221  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  00000f08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000112  00000000  00000000  00000f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000043  00000000  00000000  0000106a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  000010ad  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e8 e9       	ldi	r30, 0x98	; 152
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	02 c0       	rjmp	.+4      	; 0x2c <.do_copy_data_start>

00000028 <.do_copy_data_loop>:
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0

0000002c <.do_copy_data_start>:
  2c:	a0 36       	cpi	r26, 0x60	; 96
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <.do_copy_data_loop>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 36       	cpi	r26, 0x67	; 103
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	27 c0       	rjmp	.+78     	; 0x94 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__heap_end>

00000048 <main>:
uint16 result1 = 0;
uint16 result2 = 0;
uint16 diff = 0;
uint8 x=0;
int main (void) 
{
  48:	84 e3       	ldi	r24, 0x34	; 52
  4a:	87 bb       	out	0x17, r24	; 23
	while(errorflag != 1)
	{
		/****LED-BLINKING-TEST****/
		
		
		for(x = 10;x<=1000;x=+10)
  4c:	8a e0       	ldi	r24, 0x0A	; 10
  4e:	80 93 66 00 	sts	0x0066, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  52:	20 ee       	ldi	r18, 0xE0	; 224
  54:	3e e2       	ldi	r19, 0x2E	; 46
		{
			PORTB= (0 << PB4);
			//PORTB= (1 << PB5);
			_delay_ms(x);
			PORTB= (1 << PB4);
  56:	40 e1       	ldi	r20, 0x10	; 16
		/****LED-BLINKING-TEST****/
		
		
		for(x = 10;x<=1000;x=+10)
		{
			PORTB= (0 << PB4);
  58:	18 ba       	out	0x18, r1	; 24
  5a:	c9 01       	movw	r24, r18
  5c:	01 97       	sbiw	r24, 0x01	; 1
  5e:	f1 f7       	brne	.-4      	; 0x5c <main+0x14>
			//PORTB= (1 << PB5);
			_delay_ms(x);
			PORTB= (1 << PB4);
  60:	48 bb       	out	0x18, r20	; 24
  62:	c9 01       	movw	r24, r18
  64:	01 97       	sbiw	r24, 0x01	; 1
  66:	f1 f7       	brne	.-4      	; 0x64 <main+0x1c>
  68:	f7 cf       	rjmp	.-18     	; 0x58 <main+0x10>

0000006a <init_tiny>:
	}
return 0;
}

void init_tiny(void)
{
  6a:	84 e3       	ldi	r24, 0x34	; 52
  6c:	87 bb       	out	0x17, r24	; 23
	/*Port-Konfiguration
	* RB0 = RB1 = RB3 = Input
	* RB2 = RB4 = RB5 = Output
	*/
	DDRB = 0x34;
}
  6e:	08 95       	ret

00000070 <adc>:
#include "config.h"

uint16 adc (uint8 pinnumber)     //measure
{            
  70:	96 b1       	in	r25, 0x06	; 6
  72:	93 68       	ori	r25, 0x83	; 131
  74:	96 b9       	out	0x06, r25	; 6
	  
	//initialize ADC, prescaler: 8
	ADCSRA |= (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);    
	  
	//Pin: ADC3
	ADMUX = pinnumber; //ADMUX = 0x03;
  76:	87 b9       	out	0x07, r24	; 7
	//Vin = Vref

	  
	//dummy measure
		// do adc
		ADCSRA |= (1<<ADSC);
  78:	36 9a       	sbi	0x06, 6	; 6
		  
		// wait for finish ADIF-bit       
		while(!(ADCSRA & (1<<ADIF))); 
  7a:	34 9b       	sbis	0x06, 4	; 6
  7c:	fe cf       	rjmp	.-4      	; 0x7a <adc+0xa>

		// clear ADIF     
		ADCSRA |= (1<<ADIF);           
  7e:	34 9a       	sbi	0x06, 4	; 6
	  
	// measure value
		// single conversion
		ADCSRA |= (1<<ADSC);   
  80:	36 9a       	sbi	0x06, 6	; 6
		// wait for finish ADIF-bit      
		while(!(ADCSRA & (1<<ADIF)));
  82:	34 9b       	sbis	0x06, 4	; 6
  84:	fe cf       	rjmp	.-4      	; 0x82 <adc+0x12>
		// save result    
		result = ADCW;   
  86:	24 b1       	in	r18, 0x04	; 4
  88:	35 b1       	in	r19, 0x05	; 5
		// clear ADIF          
		ADCSRA |= (1<<ADIF);        
  8a:	34 9a       	sbi	0x06, 4	; 6
		// deactivate ADC
		ADCSRA &= ~(1<<ADEN);
  8c:	37 98       	cbi	0x06, 7	; 6
		// clear ADMUX           
		ADMUX = 0x00;              
  8e:	17 b8       	out	0x07, r1	; 7
	// send result to requester
	return result;              
}
  90:	c9 01       	movw	r24, r18
  92:	08 95       	ret

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
